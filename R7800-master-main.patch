diff --git a/.config.init b/.config.init
new file mode 100644
index 0000000000..6502caa235
--- /dev/null
+++ b/.config.init
@@ -0,0 +1,165 @@
+# Use "make defconfig" to expand this to a full .config
+CONFIG_TARGET_ipq806x=y
+CONFIG_TARGET_ipq806x_generic=y
+CONFIG_TARGET_ipq806x_generic_DEVICE_netgear_r7800=y
+#CONFIG_TESTING_KERNEL=y
+
+# Per-package build logs in <buildroot>/logs
+CONFIG_DEVEL=y
+CONFIG_BUILD_LOG=y
+
+# Debugging options (build gdbserver, include package debug)
+CONFIG_PACKAGE_gdbserver=y
+CONFIG_DEBUG=y
+
+# Include package list in build
+CONFIG_INCLUDE_CONFIG=y
+
+# Longer waiting for failsafe button push
+CONFIG_IMAGEOPT=y
+CONFIG_PREINITOPT=y
+CONFIG_TARGET_PREINIT_TIMEOUT=5
+
+# Busybox tweaks
+CONFIG_BUSYBOX_CUSTOM=y
+#CONFIG_BUSYBOX_CONFIG_DIFF=y
+CONFIG_BUSYBOX_CONFIG_FEATURE_EDITING_SAVEHISTORY=y
+CONFIG_BUSYBOX_CONFIG_FEATURE_EDITING_SAVE_ON_EXIT=y
+CONFIG_BUSYBOX_CONFIG_FEATURE_LESS_FLAGS=y
+CONFIG_BUSYBOX_CONFIG_FEATURE_LESS_REGEXP=y
+CONFIG_BUSYBOX_CONFIG_FEATURE_LESS_WINCH=y
+
+### Build also ath10k mainline .ipk
+### (disable this if you use the below section to fully switch to mainline)
+CONFIG_PACKAGE_kmod-ath10k=m
+
+## # Mainline ath10k wifi firmware and driver instead of -ct
+## CONFIG_PACKAGE_ath10k-firmware-qca9984=y
+## # CONFIG_PACKAGE_ath10k-firmware-qca9984-ct is not set
+## CONFIG_PACKAGE_kmod-ath10k=y
+## # CONFIG_PACKAGE_kmod-ath10k-ct is not set
+
+# Add-on programs
+CONFIG_PACKAGE_ccrypt=y
+CONFIG_PACKAGE_curl=y
+CONFIG_LIBCURL_OPENSSL=y
+CONFIG_PACKAGE_diffutils=y
+CONFIG_DROPBEAR_ECC=y
+CONFIG_PACKAGE_htop=y
+CONFIG_PACKAGE_irqbalance=y
+CONFIG_PACKAGE_mtr-nojson=y
+CONFIG_PACKAGE_nano-full=y
+CONFIG_PACKAGE_patch=y
+CONFIG_PACKAGE_tcpdump-mini=y
+CONFIG_PACKAGE_tree=y
+CONFIG_PACKAGE_wget-ssl=y
+
+# USB device mount & file systems support
+CONFIG_PACKAGE_block-mount=y
+CONFIG_PACKAGE_kmod-usb-storage=y
+CONFIG_PACKAGE_kmod-fs-cifs=y
+CONFIG_PACKAGE_kmod-fs-exfat=y
+CONFIG_PACKAGE_libblkid=y
+CONFIG_PACKAGE_kmod-fs-ext4=y
+CONFIG_PACKAGE_kmod-fs-hfsplus=y
+CONFIG_PACKAGE_kmod-fs-msdos=y
+CONFIG_PACKAGE_kmod-fs-vfat=y
+CONFIG_PACKAGE_ntfs-3g=y
+CONFIG_PACKAGE_kmod-nls-cp1250=y
+CONFIG_PACKAGE_kmod-nls-cp437=y
+CONFIG_PACKAGE_kmod-nls-cp850=y
+CONFIG_PACKAGE_kmod-nls-iso8859-1=y
+CONFIG_PACKAGE_kmod-nls-iso8859-15=y
+CONFIG_PACKAGE_kmod-nls-utf8=y
+
+# IPv6 support
+CONFIG_PACKAGE_6in4=y
+CONFIG_PACKAGE_6to4=y
+CONFIG_PACKAGE_6rd=y
+
+# IPv6 NAT support (ip6tables NAT extensions, ipt-nat6 and nf-nat6 kmods)
+####CONFIG_PACKAGE_ip6tables-mod-nat=y
+
+# WLAN/WPS support
+CONFIG_PACKAGE_hostapd-utils=y
+#CONFIG_WPA_MSG_MIN_PRIORITY=2
+CONFIG_PACKAGE_wpad-openssl=y
+# CONFIG_PACKAGE_wpad-basic-wolfssl is not set
+# CONFIG_PACKAGE_libustream-wolfssl is not set
+
+# SSL certificates
+CONFIG_PACKAGE_ca-certificates=y
+
+# Luci (SSL from OpenSSL)
+CONFIG_PACKAGE_luci-ssl-openssl=y
+CONFIG_PACKAGE_luci-app-commands=y
+CONFIG_PACKAGE_luci-app-ddns=y
+CONFIG_PACKAGE_luci-app-sqm=y
+CONFIG_PACKAGE_luci-app-uhttpd=y
+CONFIG_PACKAGE_luci-app-upnp=y
+CONFIG_PACKAGE_luci-app-wol=y
+# CONFIG_LUCI_JSMIN is not set
+
+# Luci statistics
+CONFIG_PACKAGE_luci-app-statistics=y
+CONFIG_PACKAGE_collectd-mod-conntrack=y
+CONFIG_PACKAGE_collectd-mod-cpufreq=y
+CONFIG_PACKAGE_collectd-mod-dhcpleases=y
+CONFIG_PACKAGE_collectd-mod-entropy=y
+CONFIG_PACKAGE_collectd-mod-ping=y
+CONFIG_PACKAGE_collectd-mod-sqm=y
+CONFIG_PACKAGE_collectd-mod-thermal=y
+CONFIG_PACKAGE_collectd-mod-uptime=y
+
+# Build material and openwrt-2020 themes, default is still bootstrap
+CONFIG_PACKAGE_luci-theme-material=y
+CONFIG_PACKAGE_luci-theme-openwrt-2020=y
+
+# kernel support for tunnels, VPNs
+CONFIG_PACKAGE_kmod-tun=y
+
+# wireguard and unetd (new wg-based mesh VPN)
+CONFIG_PACKAGE_luci-app-wireguard=y
+CONFIG_PACKAGE_unetd=y
+CONFIG_PACKAGE_unet-cli=y
+
+# PPTP support
+CONFIG_PACKAGE_luci-proto-ppp=y
+CONFIG_PACKAGE_ppp-mod-pptp=y
+
+# iptables add-on ipsec
+CONFIG_PACKAGE_iptables-mod-ipsec=y
+
+# Support for IETF BCP38
+CONFIG_PACKAGE_luci-app-bcp38=m
+
+# Adblock package with Luci support, initially disabled
+CONFIG_PACKAGE_luci-app-adblock=y
+
+# BanIP package with Luci support, initially disabled
+####CONFIG_PACKAGE_luci-app-banip=y
+
+# nlbwmon app
+CONFIG_PACKAGE_luci-app-nlbwmon=y
+
+# chaoskey TRNG USB dongle
+CONFIG_PACKAGE_kmod-chaoskey=y
+
+# kernel module needed for qosify
+CONFIG_PACKAGE_kmod-sched-bpf=y
+
+## Build and include qosify, if the LLVM toolchain has been downloaded and
+## extracted to the buildroot before the build config is started.
+## The file can be downloaded from buildbot snapshot target downloads.
+## https://downloads.openwrt.org/snapshots/targets/ipq806x/generic/llvm-bpf-13.0.0.tar.xz
+##
+CONFIG_USE_LLVM_PREBUILT=y
+CONFIG_PACKAGE_qosify=y
+
+# NFT support for iptables
+CONFIG_PACKAGE_iptables-nft=y
+CONFIG_PACKAGE_ip6tables-nft=y
+
+# ipset and kernel module
+CONFIG_PACKAGE_ipset=y
+
diff --git a/.gitignore b/.gitignore
index a80cdbbea3..bd42cb89f3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -13,15 +13,12 @@
 /logs
 /feeds
 /feeds.conf
-/files
 /overlay
 /package/feeds
 /package/openwrt-packages
 /*.patch
 /llvm-bpf*
 key-build*
-*.orig
-*.rej
 *~
 .#*
 *#
diff --git a/feeds.conf.default b/feeds.conf.default
index 50ae67cb9d..c57970c0c4 100644
--- a/feeds.conf.default
+++ b/feeds.conf.default
@@ -1,7 +1,8 @@
 src-git-full packages https://git.openwrt.org/feed/packages.git
 src-git-full luci https://git.openwrt.org/project/luci.git
+##src-git-full luci https://github.com/jow-/luci.git;ucode
 src-git-full routing https://git.openwrt.org/feed/routing.git
-src-git-full telephony https://git.openwrt.org/feed/telephony.git
+#src-git-full telephony https://git.openwrt.org/feed/telephony.git
 #src-git-full video https://github.com/openwrt/video.git
 #src-git-full targets https://github.com/openwrt/targets.git
 #src-git-full oldpackages http://git.openwrt.org/packages.git
diff --git a/files/etc/Compile_info.txt b/files/etc/Compile_info.txt
new file mode 100644
index 0000000000..5017124835
--- /dev/null
+++ b/files/etc/Compile_info.txt
@@ -0,0 +1,6 @@
+OpenWrt master r21210-961e01fc67 / 2022-11-07 18:25
+---
+main      2022-11-07 961e01f ramips: gl-mt1300: downclock SPI to 50MHz
+luci      2022-11-07 7409523 luci-base: rebase i18n
+packages  2022-11-07 8e2091c sudo: bump to verison 1.9.12p1
+routing   2022-11-03 c2f9428 olsrd: trim trailing space
diff --git a/files/etc/applyHNsettings.sh b/files/etc/applyHNsettings.sh
new file mode 100755
index 0000000000..d49760d772
--- /dev/null
+++ b/files/etc/applyHNsettings.sh
@@ -0,0 +1,11 @@
+#!/bin/sh
+cp -f $1 /tmp/HNsettings.cpt
+if [ "$?" -eq 0 ] ; then
+  ccdecrypt -vf /tmp/HNsettings.cpt
+  if [ "$?" -eq 0 ] ; then
+    tar -xzv -f /tmp/HNsettings -C /etc
+    chmod 744 /etc/dropbear/authorized_keys
+    sync
+  fi
+fi
+
diff --git a/files/etc/backup.stats/.placeholder b/files/etc/backup.stats/.placeholder
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/files/etc/checksettings.sh b/files/etc/checksettings.sh
new file mode 100755
index 0000000000..e7a1c42c19
--- /dev/null
+++ b/files/etc/checksettings.sh
@@ -0,0 +1,13 @@
+#!/bin/sh
+cd /etc/config
+for F in *
+do
+        echo
+        echo "===== $F ====="
+        uci -c /rom/etc/config export $F >/tmp/$F.default 2>/dev/null
+        case $? in 0) ;; *) echo '>> no default in /rom <<' ;; esac
+        uci export $F >/tmp/$F.current
+        diff -u /tmp/$F.default /tmp/$F.current
+        rm -f /tmp/$F.default /tmp/$F.current
+done
+
diff --git a/files/etc/config/fstab b/files/etc/config/fstab
new file mode 100644
index 0000000000..4bc3fdc594
--- /dev/null
+++ b/files/etc/config/fstab
@@ -0,0 +1,11 @@
+config 'global'
+	option anon_swap  '0'
+	option anon_mount '1'
+	option auto_swap  '1'
+	option auto_mount '1'
+	option delay_root '0'
+	option check_fs   '0'
+
+## use 'block detect' to find out uuid, if you want device specific mount.
+## anon_mount enables the automatic mounting of /dev/sdXy to /mnt/sdXy
+
diff --git a/files/etc/hotplug.d/ntp/20-ntpd-logger b/files/etc/hotplug.d/ntp/20-ntpd-logger
new file mode 100644
index 0000000000..7f1ff28f8b
--- /dev/null
+++ b/files/etc/hotplug.d/ntp/20-ntpd-logger
@@ -0,0 +1,4 @@
+#!/bin/sh
+[ $ACTION = "step" ]    && logger -t ntpd Time set, stratum=$stratum interval=$poll_interval offset=$offset
+[ $ACTION = "stratum" ] && logger -t ntpd Stratum change, stratum=$stratum interval=$poll_interval offset=$offset
+
diff --git a/files/etc/lan-repeater.sh b/files/etc/lan-repeater.sh
new file mode 100755
index 0000000000..088bdbb2d5
--- /dev/null
+++ b/files/etc/lan-repeater.sh
@@ -0,0 +1,28 @@
+#!/bin/sh
+uci set system.@system[0].hostname=router2
+uci set network.lan.ipaddr=192.168.1.2
+uci set network.lan.ip6ifaceid='::2'
+uci set network.lan.gateway=192.168.1.1
+uci set network.lan.dns=192.168.1.1
+uci set network.henet.auto=0
+uci set network.lan6=interface
+uci set network.lan6.ifname=@lan
+uci set network.lan6.proto=dhcpv6
+uci set network.lan6.reqprefix=no
+uci set wireless.@wifi-device[0].channel=48
+uci set wireless.@wifi-device[1].channel=9
+uci set dhcp.lan.ignore=1
+uci set dhcp.lan.force=0
+uci delete dhcp.lan.dhcpv6
+uci delete dhcp.lan.ra
+uci delete dhcp.lan.ndp
+uci set upnpd.config.enable_natpmp=0
+uci set upnpd.config.enable_upnp=0
+uci commit dhcp
+uci commit network
+uci commit wireless
+uci commit system
+uci commit upnpd
+/etc/init.d/dnsmasq disable
+/etc/init.d/miniupnpd disable
+
diff --git a/files/etc/restoreStats.sh b/files/etc/restoreStats.sh
new file mode 100755
index 0000000000..ef205bd577
--- /dev/null
+++ b/files/etc/restoreStats.sh
@@ -0,0 +1,9 @@
+#!/bin/sh
+
+/etc/init.d/collectd stop
+logger -t "LuCI statistics" collectd stopped, stats being restored
+mkdir -p /tmp/rrd/$(uname -n)
+cd /tmp/rrd/$(uname -n)
+tar x -zvf /etc/backup.stats/stats.tar.gz
+sync
+/etc/init.d/collectd start
diff --git a/files/etc/saveHNsettings.sh b/files/etc/saveHNsettings.sh
new file mode 100755
index 0000000000..5e19c8fd33
--- /dev/null
+++ b/files/etc/saveHNsettings.sh
@@ -0,0 +1,13 @@
+#!/bin/sh
+cd /etc
+tar -czv -f /tmp/HNsettings \
+  config/network config/wireless config/firewall config/dhcp config/sqm \
+  config/luci_statistics config/bcp38 \
+  dropbear/authorized_keys adblock/adblock.whitelist crontabs/root
+if [ "$?" -eq 0 ] ; then
+  ccencrypt -vf /tmp/HNsettings
+  if [ "$?" -eq 0 ] ; then
+    cp -f /tmp/HNsettings.cpt /etc/HNsettings.$1.cpt
+  fi
+fi
+
diff --git a/files/etc/storeStats.sh b/files/etc/storeStats.sh
new file mode 100755
index 0000000000..c72960f579
--- /dev/null
+++ b/files/etc/storeStats.sh
@@ -0,0 +1,9 @@
+#!/bin/sh
+/etc/init.d/collectd stop
+logger -t "LuCI statistics" Create backup archive
+mkdir -p /etc/backup.stats
+cd /tmp/rrd/$(uname -n)
+tar c -zvf /etc/backup.stats/stats.tar.gz *
+cp /etc/backup.stats/stats.tar.gz /etc/backup.stats/stats-$(date +%Y%m%dT%H%M).tar.gz
+sync
+/etc/init.d/collectd start
diff --git a/files/etc/wifi-suite.sh b/files/etc/wifi-suite.sh
new file mode 100755
index 0000000000..3b002ec409
--- /dev/null
+++ b/files/etc/wifi-suite.sh
@@ -0,0 +1,36 @@
+#!/bin/sh
+
+echo "Associated wifi stations' AKM suites:"
+cd /var/run/hostapd
+for socket in *; do
+  [ -S "$socket" ] || continue
+  [ "$socket" = "global" ] && continue
+  for assoc in $(hostapd_cli -i "$socket" list_sta); do
+    suite=$(hostapd_cli -i "$socket" sta "$assoc" | grep "AKMSuiteSelector" | cut -f 2 -d"=")
+    case "$suite" in
+        00-0f-ac-1) akm=802.1x  ;;
+        00-0f-ac-2) akm=WPA-PSK  ;;
+        00-0f-ac-3) akm=FT-802.1x  ;;
+        00-0f-ac-4) akm=WPA-PSK-FT  ;;
+        00-0f-ac-5) akm=802.1x-SHA256  ;;
+        00-0f-ac-6) akm=WPA-PSK-SHA256  ;;
+        00-0f-ac-7) akm=TDLS  ;;
+        00-0f-ac-8) akm=WPA3-SAE  ;;
+        00-0f-ac-9) akm=FT-SAE  ;;
+        00-0f-ac-10) akm=AP-PEER-KEY  ;;
+        00-0f-ac-11) akm=802.1x-suite-B  ;;
+        00-0f-ac-12) akm=802.1x-suite-B-192  ;;
+        00-0f-ac-13) akm=FT-802.1x-SHA384  ;;
+        00-0f-ac-14) akm=FILS-SHA256  ;;
+        00-0f-ac-15) akm=FILS-SHA384  ;;
+        00-0f-ac-16) akm=FT-FILS-SHA256  ;;
+        00-0f-ac-17) akm=FT-FILS-SHA384  ;;
+        00-0f-ac-18) akm=OWE  ;;
+        00-0f-ac-19) akm=FT-WPA2-PSK-SHA384  ;;
+        00-0f-ac-20) akm=WPA2-PSK-SHA384  ;;
+        *) akm="undefined" ;;
+    esac
+    echo "$socket: AKM suite of $assoc is $suite ($akm)"
+  done
+done
+
diff --git a/hnscripts/copyPackages2tmp.sh b/hnscripts/copyPackages2tmp.sh
new file mode 100755
index 0000000000..4222b2c6f0
--- /dev/null
+++ b/hnscripts/copyPackages2tmp.sh
@@ -0,0 +1,23 @@
+#!/bin/sh
+#
+# copyPackages2tmp  -  Copy packages to router's /tmp directory
+
+#create new /etc/opkg/customfeeds.conf with base, luci, packages, routing
+cat <<EOF >/tmp/customfeeds.conf
+src/gz TmpBase file:/tmp/arm_cortex-a15_neon-vfpv4/base
+src/gz TmpLuci file:/tmp/arm_cortex-a15_neon-vfpv4/luci
+src/gz TmpPackages file:/tmp/arm_cortex-a15_neon-vfpv4/packages
+src/gz TmpRouting file:/tmp/arm_cortex-a15_neon-vfpv4/routing
+src/gz TmpTarget file:/tmp/target
+EOF
+
+#copy packages
+echo "Copy packages..."
+scp -r bin/packages/arm_cortex-a15_neon-vfpv4 root@192.168.1.1:/tmp/
+scp -r bin/targets/ipq806x/generic/packages root@192.168.1.1:/tmp/target
+
+#copy and overwrite /etc/opkg/customfeeds.conf
+echo "Copy modified /etc/opkg/customfeeds.conf..."
+scp /tmp/customfeeds.conf root@192.168.1.1:/etc/opkg/customfeeds.conf
+echo "done."
+
diff --git a/hnscripts/createbuildinfo.sh b/hnscripts/createbuildinfo.sh
new file mode 100755
index 0000000000..c08766cc38
--- /dev/null
+++ b/hnscripts/createbuildinfo.sh
@@ -0,0 +1,65 @@
+#!/bin/sh
+#
+# createbuildinfo  -  Create info on current config and source code changes
+
+getGitInfo() {
+#params: directory patchfile infofile
+ echo "\n######################################################\n" >> $3
+ (cd $1
+  git diff HEAD > $2
+  git remote -v show | grep fetch >> $3
+  git branch --list >> $3
+  git show --format="%cd %h %s" --abbrev=7 --date=short | head -n 1 | cut -b1-60 >> $3
+  git status --porcelain >> $3
+ )
+}
+
+BinDir=$PWD/bin/targets/ipq806x/generic
+Device=R7800
+Prefix=openwrt-ipq806x-generic-netgear_r7800
+Branch=master
+
+VersTime=$Branch-$(scripts/getver.sh)-$(date +%Y%m%d-%H%M)
+TFile=$BinDir/$Device-$VersTime
+
+echo process $Branch...
+
+# cleanup old binaries & patches
+rm -f $BinDir/$Device-* $BinDir/ath10k-*
+
+# remove unnecessary files
+rm -f $BinDir/*root.img $BinDir/*vmlinux.elf $BinDir/*initramfs-uImage
+
+# create status info and patches
+echo "$VersTime" > $TFile-status.txt
+getGitInfo . $TFile-main.patch $TFile-status.txt
+getGitInfo feeds/luci $TFile-luci.patch $TFile-status.txt
+getGitInfo feeds/packages $TFile-packages.patch $TFile-status.txt
+#getGitInfo feeds/routing $TFile-routing.patch $TFile-status.txt
+sed -i -e 's/$/\r/' $TFile-status.txt
+
+# collect config info
+cp .config $TFile.config
+cp .config.init $TFile.config.init
+scripts/diffconfig.sh > $TFile.diffconfig.txt 2>/dev/null
+
+# copy buildroot creation script and patch timestamp info
+cp hnscripts/newBuildroot.sh $TFile-newBuildroot.sh
+sed -i "s/^FILESTAMP=.*/FILESTAMP=$Device-$VersTime/" $TFile-newBuildroot.sh
+
+# cleanup checksum files
+grep -sh $Prefix.*-squashfs $BinDir/md5sums $BinDir/sha256sums \
+  | sed -e 's/$/\r/' -e 's/\*'$Prefix'/'$Device'/' -e 's/squashfs-//' \
+  > $TFile-checksums.txt
+rm -f $BinDir/md5sums $BinDir/sha256sums
+
+# rename manifest and firmware files
+cd $BinDir
+mv *.manifest $Device-$VersTime-manifest.txt
+mv $Prefix-squashfs-sysupgrade.bin $Device-$VersTime-sysupgrade.bin
+mv $Prefix-squashfs-factory.img $Device-$VersTime-factory.img
+
+# copy ath10k ct+mainline kmods
+cp packages/kmod-ath10k_* ath10k-mainline-$VersTime.ipk
+cp packages/kmod-ath10k-ct_* ath10k-ct-$VersTime.ipk
+
diff --git a/hnscripts/kernelcompile.sh b/hnscripts/kernelcompile.sh
new file mode 100755
index 0000000000..8bf93a3a53
--- /dev/null
+++ b/hnscripts/kernelcompile.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+#
+# kernelcompile  -  Clean & compile kernel using a single thread. No update.
+
+echo "...make kernel..."
+make target/linux/clean
+mkdir -p logs
+make target/linux/compile V=s 2>&1 | tee logs/build.log | grep -i -E "^make.*(error|[12345]...Entering dir)"
+
diff --git a/hnscripts/mountNcopy.sh b/hnscripts/mountNcopy.sh
new file mode 100755
index 0000000000..e64ecc89fd
--- /dev/null
+++ b/hnscripts/mountNcopy.sh
@@ -0,0 +1,34 @@
+#!/bin/sh
+#
+# mount & copy  -  Mount the Virtualbox shared folder and copy files to PC
+
+Mounttype=vboxsf
+Mountname=PCSHARE
+Mountpoint=/media/windows-share
+BinDir=bin/targets/ipq806x/generic
+
+echo Check for existing mount of the shared folder $Mountpoint
+df | grep $Mountpoint
+if [ "$?" -ne 0 ]; then
+  echo Mounting $Mountpoint as $Mountname...
+  sudo mount -t $Mounttype $Mountname $Mountpoint
+  [ "$?" -ne 0 ] && echo "Sudo/mount failed." && exit 1
+fi
+
+echo "\nCopy from $PWD ..."
+cp $BinDir/*bin $Mountpoint
+sleep 2
+cp $BinDir/*img $Mountpoint
+sleep 2
+cp $BinDir/ath10k* $Mountpoint
+sleep 1
+cp $BinDir/*patch $Mountpoint
+sleep 1
+cp $BinDir/*sh $Mountpoint
+sleep 1
+cp $BinDir/*txt $Mountpoint
+sleep 1
+cp $BinDir/*config.init $Mountpoint
+cp $BinDir/*config $Mountpoint
+echo done.
+
diff --git a/hnscripts/newBuildroot.sh b/hnscripts/newBuildroot.sh
new file mode 100755
index 0000000000..c6255f21d2
--- /dev/null
+++ b/hnscripts/newBuildroot.sh
@@ -0,0 +1,74 @@
+#!/bin/sh
+#
+# newBuildroot.sh
+#
+# Creates the build environment with the current directory as the root
+# To avoid problems with long paths, something like /Openwrt is preferable
+#
+# Script creates subdir for master (or the release branch), and dl for downloads
+# Creates main source repository and luci, packages & routing feeds
+
+### Target definitions
+TARGET=master
+GITREPO=https://git.openwrt.org/openwrt/openwrt.git
+
+## Current version
+FILESTAMP=R7800-master-r21108-a31b598590-20221025-1833
+
+### Prerequisites for buildroot for the current Ubuntu
+sudo apt-get install build-essential libncurses5-dev zlib1g-dev
+sudo apt-get install gawk gcc-multilib flex git gettext libssl-dev
+sudo apt-get install python3-distutils
+
+### Prerequisites for being able to send patches to openwrt-devel
+sudo apt-get install git-email
+
+### Newly patched Ubuntu may not yet have the correct kernel headers.
+# sudo apt-get install linux-headers-$(uname -r)
+
+### set the preferred umask (allowed: 0000-0022)
+umask 0022
+
+### download directory (outside main directory to protect from make distclean)
+mkdir -p dl
+
+### main directory
+mkdir -p $TARGET
+
+### checkout/clone and change to directory
+git clone $GITREPO $TARGET
+cd $TARGET
+
+### create symlink to dl (after git clone)
+ln -s ../dl dl
+
+### patch main source first to set feeds correctly
+### update the feeds, apply patches to feeds
+### re-create index to find new packages, finally install
+patch -p1 -i ../$FILESTAMP-main.patch
+scripts/feeds update -a
+(cd feeds/luci;     patch -p1 -i ../../../$FILESTAMP-luci.patch)
+(cd feeds/packages; patch -p1 -i ../../../$FILESTAMP-packages.patch)
+#(cd feeds/routing;  patch -p1 -i ../../../$FILESTAMP-routing.patch)
+scripts/feeds update -i
+scripts/feeds install -a
+
+### chmod known script files executable
+chmod -f 755 files/etc/*.sh
+chmod -f 755 files/etc/rc.button/*
+
+### chmod buildscripts executable
+chmod -f 755 hnscripts/*.sh
+
+### add created/modified files in main repo to version control
+git add -f files
+git add -A
+
+### add created/modified files in feeds to version control
+(cd feeds/luci;     git add -A)
+(cd feeds/packages; git add -A)
+#(cd feeds/routing;  git add -A)
+
+### initialise .config
+cp .config.init .config
+
diff --git a/hnscripts/parallelcompile.sh b/hnscripts/parallelcompile.sh
new file mode 100755
index 0000000000..093c29dbea
--- /dev/null
+++ b/hnscripts/parallelcompile.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+#
+# parallelcompile  -  Compile using multiple threads
+
+echo "...create version info file..."
+hnscripts/timestampVersion.sh
+echo "...make world..."
+mkdir -p logs
+make -j 5 V=s 2>&1 | tee logs/build.log | grep -i -E "^make.*(error|[12345]...Entering dir)|^warning"
+[ ${PIPESTATUS[0]} -ne 0 ] && exit 1
+echo -n "...create build info: "
+hnscripts/createbuildinfo.sh
+echo done.
+
diff --git a/hnscripts/singlecompile.sh b/hnscripts/singlecompile.sh
new file mode 100755
index 0000000000..ac05bd6434
--- /dev/null
+++ b/hnscripts/singlecompile.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+#
+# singlecompile  -  Compile using a single thread. For debug
+
+echo "...create version info file..."
+hnscripts/timestampVersion.sh
+echo "...make world..."
+mkdir -p logs
+make V=s 2>&1 | tee logs/build.log | grep -i -E "^make.*(error|[12345]...Entering dir)|^warning"
+[ ${PIPESTATUS[0]} -ne 0 ] && exit 1
+echo -n "...create build info: "
+hnscripts/createbuildinfo.sh
+echo done.
+
diff --git a/hnscripts/timestampVersion.sh b/hnscripts/timestampVersion.sh
new file mode 100755
index 0000000000..b360759e2f
--- /dev/null
+++ b/hnscripts/timestampVersion.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+#
+# timestampVersion  -  Collect source version info and insert it into firmware
+
+STATUSFILE=files/etc/Compile_info.txt
+Nickname=master
+
+echo OpenWrt $Nickname `scripts/getver.sh` / `date "+%F %H:%M"` > $STATUSFILE
+echo "---" >> $STATUSFILE
+echo "main      $(git log -1 --format="%cd %h %s" --abbrev=7 --date=short | head -n 1 | cut -b1-60)" >> $STATUSFILE
+echo "luci      $(cd feeds/luci && git log -1 --format="%cd %h %s" --abbrev=7 --date=short | cut -b1-60)" >> $STATUSFILE
+echo "packages  $(cd feeds/packages && git log -1 --format="%cd %h %s" --abbrev=7 --date=short | cut -b1-60)" >> $STATUSFILE
+echo "routing   $(cd feeds/routing && git log -1 --format="%cd %h %s" --abbrev=7 --date=short | cut -b1-60)" >> $STATUSFILE
+cat $STATUSFILE
+git add $STATUSFILE
+
+# Override git/svn timestamp after r48583-48594, set initial clock to now
+date +%s > version.date
+
diff --git a/hnscripts/updateNmake.sh b/hnscripts/updateNmake.sh
new file mode 100755
index 0000000000..8eff1db078
--- /dev/null
+++ b/hnscripts/updateNmake.sh
@@ -0,0 +1,22 @@
+#!/bin/bash
+#
+# update & make  -  Update source code and continue to make the build
+
+umask 0022
+echo "...update main source..."
+git pull
+[ "$?" -ne 0 ] && echo "Updating the main OpenWrt source code failed." && exit 1
+echo "...update feeds..."
+./scripts/feeds update -a
+[ "$?" -ne 0 ] && echo "Updating the feeds failed." && exit 1
+echo "...install feeds..."
+./scripts/feeds install -a
+echo "...make defconfig..."
+make defconfig
+#echo "...make menuconfig..."
+#make menuconfig
+echo "...download new source packages..."
+make download
+echo "...make the firmware..."
+hnscripts/parallelcompile.sh
+
diff --git a/package/base-files/files/bin/config_generate b/package/base-files/files/bin/config_generate
index 0001f88746..162940d7ef 100755
--- a/package/base-files/files/bin/config_generate
+++ b/package/base-files/files/bin/config_generate
@@ -311,9 +311,10 @@ generate_static_system() {
 		delete system.@system[0]
 		add system system
 		set system.@system[-1].hostname='OpenWrt'
-		set system.@system[-1].timezone='UTC'
+		set system.@system[-1].timezone='EET-2EEST,M3.5.0/3,M10.5.0/4'
+		set system.@system[-1].zonename='Europe/Helsinki'
 		set system.@system[-1].ttylogin='0'
-		set system.@system[-1].log_size='64'
+		set system.@system[-1].log_size='192'
 		set system.@system[-1].urandom_seed='0'
 
 		delete system.ntp
diff --git a/package/base-files/files/etc/rc.button/reset b/package/base-files/files/etc/rc.button/reset
index 2403122ad2..5746ea237a 100755
--- a/package/base-files/files/etc/rc.button/reset
+++ b/package/base-files/files/etc/rc.button/reset
@@ -15,16 +15,8 @@ timeout)
 	set_state failsafe
 ;;
 released)
-	if [ "$SEEN" -lt 1 ]
-	then
-		echo "REBOOT" > /dev/console
-		sync
-		reboot
-	elif [ "$SEEN" -ge 5 -a -n "$OVERLAY" ]
-	then
 		echo "FACTORY RESET" > /dev/console
 		jffs2reset -y && reboot &
-	fi
 ;;
 esac
 
diff --git a/package/network/config/qosify/files/qosify.conf b/package/network/config/qosify/files/qosify.conf
index 7a3d0d068a..31abfb7274 100644
--- a/package/network/config/qosify/files/qosify.conf
+++ b/package/network/config/qosify/files/qosify.conf
@@ -27,8 +27,8 @@ config class voice
 config interface wan
 	option name wan
 	option disabled 1
-	option bandwidth_up 100mbit
-	option bandwidth_down 100mbit
+	option bandwidth_up 55mbit
+	option bandwidth_down 190mbit
 	option overhead_type none
 	# defaults:
 	option ingress 1
diff --git a/package/network/ipv6/6in4/files/6in4.sh b/package/network/ipv6/6in4/files/6in4.sh
index 5b5c7b36af..d75c6f4f41 100755
--- a/package/network/ipv6/6in4/files/6in4.sh
+++ b/package/network/ipv6/6in4/files/6in4.sh
@@ -25,7 +25,7 @@ test_6in4_rfc1918()
 
 proto_6in4_update() {
 	sh -c '
-		timeout=5
+		timeout=8
 
 		(while [ $((timeout--)) -gt 0 ]; do
 			sleep 1
diff --git a/package/network/services/dnsmasq/files/dhcp.conf b/package/network/services/dnsmasq/files/dhcp.conf
index 8c42ef782e..296ce32641 100644
--- a/package/network/services/dnsmasq/files/dhcp.conf
+++ b/package/network/services/dnsmasq/files/dhcp.conf
@@ -10,6 +10,7 @@ config dnsmasq
 	option domain	'lan'
 	option expandhosts	1
 	option nonegcache	0
+	option cachesize	1000
 	option authoritative	1
 	option readethers	1
 	option leasefile	'/tmp/dhcp.leases'
diff --git a/package/network/services/hostapd/files/hostapd.sh b/package/network/services/hostapd/files/hostapd.sh
index 7eeb74e984..d6d26b95e4 100644
--- a/package/network/services/hostapd/files/hostapd.sh
+++ b/package/network/services/hostapd/files/hostapd.sh
@@ -802,6 +802,11 @@ hostapd_set_bss_options() {
 		set_default wps_manufacturer "www.openwrt.org"
 		set_default wps_independent 1
 
+		# Set WPS label pin to original Netgear value stored in art partition
+		# Value for wps_pin can be overridden by /etc/config/wireless
+#		local PINdefault="$(dd if=/dev/mtdblock3 bs=1 skip=18 count=8 2>/dev/null)"
+#		set_default wps_pin "$PINdefault"
+
 		wps_state=2
 		[ -n "$wps_not_configured" ] && wps_state=1
 
@@ -890,7 +895,7 @@ hostapd_set_bss_options() {
 
 			set_default mobility_domain "$(echo "$ssid" | md5sum | head -c 4)"
 			set_default ft_over_ds 0
-			set_default reassociation_deadline 1000
+			set_default reassociation_deadline 20000
 
 			case "$auth_type" in
 				psk|sae|psk-sae)
diff --git a/package/network/services/hostapd/files/wps-hotplug.sh b/package/network/services/hostapd/files/wps-hotplug.sh
index 073bdd1868..dc05718eb7 100644
--- a/package/network/services/hostapd/files/wps-hotplug.sh
+++ b/package/network/services/hostapd/files/wps-hotplug.sh
@@ -39,6 +39,7 @@ wps_catch_credentials() {
 }
 
 if [ "$ACTION" = "released" ] && [ "$BUTTON" = "wps" ]; then
+	logger "WPS button pressed, looking for active radios"
 	# If the button was pressed for 3 seconds or more, trigger WPS on
 	# wpa_supplicant only, no matter if hostapd is running or not.  If
 	# was pressed for less than 3 seconds, try triggering on
diff --git a/package/network/services/odhcpd/files/odhcpd-update b/package/network/services/odhcpd/files/odhcpd-update
index c1814e00b0..b2f92bf10d 100755
--- a/package/network/services/odhcpd/files/odhcpd-update
+++ b/package/network/services/odhcpd/files/odhcpd-update
@@ -1,6 +1,8 @@
 #!/bin/sh
 # Make dnsmasq reread hostfile by sending SIGHUP signal
 
+logger -t odhcpd "*** ODHCPD triggers DNSMASQ reload ***"
+
 . /lib/functions/procd.sh
 
 procd_send_signal dnsmasq
diff --git a/package/utils/busybox/patches/310-save-history-in-tmp.patch b/package/utils/busybox/patches/310-save-history-in-tmp.patch
new file mode 100644
index 0000000000..ff76ddb956
--- /dev/null
+++ b/package/utils/busybox/patches/310-save-history-in-tmp.patch
@@ -0,0 +1,11 @@
+--- a/shell/ash.c
++++ b/shell/ash.c
+@@ -14693,7 +14693,7 @@ int ash_main(int argc UNUSED_PARAM, char
+ 		if (line_input_state) {
+ 			const char *hp = lookupvar("HISTFILE");
+ 			if (!hp) {
+-				hp = lookupvar("HOME");
++				hp = "/tmp";
+ 				if (hp) {
+ 					INT_OFF;
+ 					hp = concat_path_file(hp, ".ash_history");
diff --git a/package/utils/busybox/patches/520-move-coreutils-to-bin.patch b/package/utils/busybox/patches/520-move-coreutils-to-bin.patch
new file mode 100644
index 0000000000..de94f592f9
--- /dev/null
+++ b/package/utils/busybox/patches/520-move-coreutils-to-bin.patch
@@ -0,0 +1,11 @@
+--- a/coreutils/sort.c
++++ b/coreutils/sort.c
+@@ -37,7 +37,7 @@
+ //config:	Attempt to use less memory (by storing only one copy
+ //config:	of duplicated lines, and such). Useful if you work on huge files.
+ 
+-//applet:IF_SORT(APPLET_NOEXEC(sort, sort, BB_DIR_USR_BIN, BB_SUID_DROP, sort))
++//applet:IF_SORT(APPLET_NOEXEC(sort, sort, BB_DIR_BIN, BB_SUID_DROP, sort))
+ 
+ //kbuild:lib-$(CONFIG_SORT) += sort.o
+ 
diff --git a/target/linux/ipq806x/base-files/etc/init.d/cpufreq b/target/linux/ipq806x/base-files/etc/init.d/cpufreq
index 19278902ed..b61824c877 100755
--- a/target/linux/ipq806x/base-files/etc/init.d/cpufreq
+++ b/target/linux/ipq806x/base-files/etc/init.d/cpufreq
@@ -11,7 +11,7 @@ boot() {
     # Effective only with ondemand
     echo 600000 > /sys/devices/system/cpu/cpufreq/policy0/scaling_min_freq
     echo 600000 > /sys/devices/system/cpu/cpufreq/policy1/scaling_min_freq
-    echo 10 > /sys/devices/system/cpu/cpufreq/ondemand/sampling_down_factor
+    echo 20 > /sys/devices/system/cpu/cpufreq/ondemand/sampling_down_factor
     echo 50 > /sys/devices/system/cpu/cpufreq/ondemand/up_threshold
   fi
 }
diff --git a/target/linux/ipq806x/patches-5.15/132-01-clk-qcom-clk-hfpll-check-PLL-lock-after-enabling-PLL.patch b/target/linux/ipq806x/patches-5.15/132-01-clk-qcom-clk-hfpll-check-PLL-lock-after-enabling-PLL.patch
new file mode 100644
index 0000000000..41b9434f01
--- /dev/null
+++ b/target/linux/ipq806x/patches-5.15/132-01-clk-qcom-clk-hfpll-check-PLL-lock-after-enabling-PLL.patch
@@ -0,0 +1,81 @@
+From 384f8d8594af5457422b1f409ed5e81472a013be Mon Sep 17 00:00:00 2001
+From: Christian Marangi <ansuelsmth@gmail.com>
+Date: Fri, 4 Nov 2022 17:41:48 +0100
+Subject: [PATCH 1/2] clk: qcom: clk-hfpll: check PLL lock after enabling PLL
+ output
+
+In the original QSDK code there was a HW raccomandation to check PLL
+lock again after enabling PLL output. This is probably needed as hfpll
+require some time to set the new pll values.
+
+Add the missing lock to make sure hfpll are correctly setup and ready.
+
+Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
+---
+ drivers/clk/qcom/clk-hfpll.c | 34 +++++++++++++++++++++++-----------
+ 1 file changed, 23 insertions(+), 11 deletions(-)
+
+diff --git a/drivers/clk/qcom/clk-hfpll.c b/drivers/clk/qcom/clk-hfpll.c
+index 7dd17c184b69..93707d5ad30d 100644
+--- a/drivers/clk/qcom/clk-hfpll.c
++++ b/drivers/clk/qcom/clk-hfpll.c
+@@ -50,13 +50,31 @@ static void __clk_hfpll_init_once(struct clk_hw *hw)
+ 	h->init_done = true;
+ }
+ 
+-static void __clk_hfpll_enable(struct clk_hw *hw)
++static void __clk_hfpll_wait_lock(struct clk_hw *hw)
+ {
+ 	struct clk_hfpll *h = to_clk_hfpll(hw);
+ 	struct hfpll_data const *hd = h->d;
+ 	struct regmap *regmap = h->clkr.regmap;
+ 	u32 val;
+ 
++	if (hd->status_reg)
++		/*
++		 * Busy wait. Should never timeout, we add a timeout to
++		 * prevent any sort of stall.
++		 */
++		regmap_read_poll_timeout(regmap, hd->status_reg, val,
++					 !(val & BIT(hd->lock_bit)), 0,
++					 100 * USEC_PER_MSEC);
++	else
++		udelay(60);
++}
++
++static void __clk_hfpll_enable(struct clk_hw *hw)
++{
++	struct clk_hfpll *h = to_clk_hfpll(hw);
++	struct hfpll_data const *hd = h->d;
++	struct regmap *regmap = h->clkr.regmap;
++
+ 	__clk_hfpll_init_once(hw);
+ 
+ 	/* Disable PLL bypass mode. */
+@@ -72,19 +90,13 @@ static void __clk_hfpll_enable(struct clk_hw *hw)
+ 	regmap_update_bits(regmap, hd->mode_reg, PLL_RESET_N, PLL_RESET_N);
+ 
+ 	/* Wait for PLL to lock. */
+-	if (hd->status_reg)
+-		/*
+-		 * Busy wait. Should never timeout, we add a timeout to
+-		 * prevent any sort of stall.
+-		 */
+-		regmap_read_poll_timeout(regmap, hd->status_reg, val,
+-					 !(val & BIT(hd->lock_bit)), 0,
+-					 100 * USEC_PER_MSEC);
+-	else
+-		udelay(60);
++	__clk_hfpll_wait_lock(hw);
+ 
+ 	/* Enable PLL output. */
+ 	regmap_update_bits(regmap, hd->mode_reg, PLL_OUTCTRL, PLL_OUTCTRL);
++
++	/* Wait for PLL to lock again. */
++	__clk_hfpll_wait_lock(hw);
+ }
+ 
+ /* Enable an already-configured HFPLL. */
+-- 
+2.37.2
+
diff --git a/target/linux/ipq806x/patches-5.15/132-02-clk-qcom-krait-cc-set-every-mux-to-safe-sel-while-sc.patch b/target/linux/ipq806x/patches-5.15/132-02-clk-qcom-krait-cc-set-every-mux-to-safe-sel-while-sc.patch
new file mode 100644
index 0000000000..af5012255a
--- /dev/null
+++ b/target/linux/ipq806x/patches-5.15/132-02-clk-qcom-krait-cc-set-every-mux-to-safe-sel-while-sc.patch
@@ -0,0 +1,407 @@
+From e0577018d5a5419f3af9adc081933a244ca8b0cd Mon Sep 17 00:00:00 2001
+From: Christian Marangi <ansuelsmth@gmail.com>
+Date: Fri, 4 Nov 2022 18:30:13 +0100
+Subject: [PATCH 2/2] clk: qcom: krait-cc: set every mux to safe sel while
+ scaling cores
+
+From the original code there seems to be a HW contraint where krait
+cores can't operate at 384MHz when L2 is at 1GHz.
+
+This may happen while the cpu are scaled to a different frequency as
+they need to be put to a safe selection that makes the cpu run at
+384MHz.
+
+To handle this hw contraint, put everything to a safe mux on scaling and
+lock scaling under spinlock.
+
+This require major rework of the krait-cc core with many changes and the
+introduction of virtual clks to handle global mux locking and the
+handling of switching to safe rate when configuring the hfpll.
+
+As a side effect with these new virtual clks, we can drop the clk
+notifier logic as they are all handled by the se virtual clks.
+
+Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
+---
+ drivers/clk/qcom/krait-cc.c | 242 +++++++++++++++++++++++++-----------
+ 1 file changed, 168 insertions(+), 74 deletions(-)
+
+diff --git a/drivers/clk/qcom/krait-cc.c b/drivers/clk/qcom/krait-cc.c
+index 949657186fdb..e37cf6ed4f3c 100644
+--- a/drivers/clk/qcom/krait-cc.c
++++ b/drivers/clk/qcom/krait-cc.c
+@@ -15,8 +15,8 @@
+ 
+ #include "clk-krait.h"
+ 
+-#define QSB_RATE	225000000
+-#define AUX_RATE	384000000
++#define QSB_RATE	225000000 /* safe rate for sec mux */
++#define AUX_RATE	384000000 /* safe rate for pri mux */
+ #define HFPLL_RATE	600000000
+ 
+ static unsigned int sec_mux_map[] = {
+@@ -30,47 +30,138 @@ static unsigned int pri_mux_map[] = {
+ 	0,
+ };
+ 
+-/*
+- * Notifier function for switching the muxes to safe parent
+- * while the hfpll is getting reprogrammed.
+- */
+-static int krait_notifier_cb(struct notifier_block *nb,
+-			     unsigned long event,
+-			     void *data)
++#define L2_INDEX	4
++struct mux_cc {
++	/* Krait configurations have at most 4 CPUs and one L2 */
++	struct clk_hw *clks[5];
++	spinlock_t lock;
++};
++
++struct mux_cc_clk {
++	struct clk_hw hw;
++	struct clk *mux;
++	struct mux_cc *mux_cc;
++	unsigned long safe_rate;
++	unsigned long old_rate;
++	int index;
++};
++#define to_mux_cc_clk(_hw) container_of(_hw, struct mux_cc_clk, hw)
++
++struct krait_cc_global {
++	struct mux_cc pri_mux_cc;
++	struct mux_cc sec_mux_cc;
++};
++
++static int mux_cc_set_rate(struct clk_hw *hw, unsigned long rate,
++			     unsigned long parent_rate)
+ {
+-	int ret = 0;
+-	struct krait_mux_clk *mux = container_of(nb, struct krait_mux_clk,
+-						 clk_nb);
+-	/* Switch to safe parent */
+-	if (event == PRE_RATE_CHANGE) {
+-		mux->old_index = krait_mux_clk_ops.get_parent(&mux->hw);
+-		ret = krait_mux_clk_ops.set_parent(&mux->hw, mux->safe_sel);
+-		mux->reparent = false;
+-	/*
+-	 * By the time POST_RATE_CHANGE notifier is called,
+-	 * clk framework itself would have changed the parent for the new rate.
+-	 * Only otherwise, put back to the old parent.
++	struct mux_cc_clk *mux_cc_clk, *target_mux_cc_clk = to_mux_cc_clk(hw);
++	struct mux_cc *mux_cc = target_mux_cc_clk->mux_cc;
++	unsigned long flags;
++	int cpu;
++
++	/* Since we can operate on multiple mux, change mux configuration under lock */
++	spin_lock_irqsave(&mux_cc->lock, flags);
++
++	/* Krait contraint.
++	 * cpu can't operate with L2 at 1GHz. When scaling mux,
++	 * move everything to safe parent if we are scaling core.
+ 	 */
+-	} else if (event == POST_RATE_CHANGE) {
+-		if (!mux->reparent)
+-			ret = krait_mux_clk_ops.set_parent(&mux->hw,
+-							   mux->old_index);
++	if (likely(target_mux_cc_clk->index != L2_INDEX)) {
++		/* Set L2 to safe rate */
++		mux_cc_clk = to_mux_cc_clk(mux_cc->clks[4]);
++		mux_cc_clk->old_rate = clk_get_rate(mux_cc_clk->mux);
++		clk_set_rate(mux_cc_clk->mux, mux_cc_clk->safe_rate);
++
++		for_each_possible_cpu(cpu) {
++			mux_cc_clk = to_mux_cc_clk(mux_cc->clks[cpu]);
++			if (mux_cc_clk == target_mux_cc_clk)
++				continue;
++			mux_cc_clk->old_rate = clk_get_rate(mux_cc_clk->mux);
++			clk_set_rate(mux_cc_clk->mux, mux_cc_clk->safe_rate);
++		}
+ 	}
+ 
+-	return notifier_from_errno(ret);
++	clk_set_rate(target_mux_cc_clk->mux, target_mux_cc_clk->safe_rate);
++	clk_set_rate(target_mux_cc_clk->mux, rate);
++
++	/* If we are scaling core, restore old rate */
++	if (likely(target_mux_cc_clk->index != L2_INDEX)) {
++		for_each_possible_cpu(cpu) {
++			mux_cc_clk = to_mux_cc_clk(mux_cc->clks[cpu]);
++			if (mux_cc_clk == target_mux_cc_clk)
++				continue;
++			clk_set_rate(mux_cc_clk->mux, mux_cc_clk->old_rate);
++		}
++
++		/* Set L2 to old rate */
++		mux_cc_clk = to_mux_cc_clk(mux_cc->clks[4]);
++		clk_set_rate(mux_cc_clk->mux, mux_cc_clk->old_rate);
++	}
++
++	spin_unlock_irqrestore(&mux_cc->lock, flags);
++
++	return 0;
++}
++
++static unsigned long mux_cc_recalc_rate(struct clk_hw *hw,
++					  unsigned long parent_rate)
++{
++	return clk_get_rate(to_mux_cc_clk(hw)->mux);
+ }
+ 
+-static int krait_notifier_register(struct device *dev, struct clk *clk,
+-				   struct krait_mux_clk *mux)
++static int mux_cc_determine_rate(struct clk_hw *hw,
++				 struct clk_rate_request *req)
+ {
+-	int ret = 0;
++	return 0;
++}
+ 
+-	mux->clk_nb.notifier_call = krait_notifier_cb;
+-	ret = devm_clk_notifier_register(dev, clk, &mux->clk_nb);
+-	if (ret)
+-		dev_err(dev, "failed to register clock notifier: %d\n", ret);
++const struct clk_ops mux_cc_clk_ops = {
++	.set_rate = mux_cc_set_rate,
++	.recalc_rate = mux_cc_recalc_rate,
++	.determine_rate = mux_cc_determine_rate,
++};
+ 
+-	return ret;
++static struct clk *
++krait_add_mux_cc_clk(struct device *dev, struct krait_mux_clk *mux, int id,
++		     unsigned long safe_rate, const char *s, const char *name,
++		     struct mux_cc *mux_cc)
++{
++	struct clk_init_data init = {
++		.num_parents = 0,
++		.ops = &mux_cc_clk_ops,
++	};
++	struct clk *clk;
++	struct mux_cc_clk *mux_cc_clk;
++	int index = id >= 0 ? id : L2_INDEX;
++	int cpu;
++
++	mux_cc_clk = devm_kzalloc(dev, sizeof(*mux_cc_clk), GFP_KERNEL);
++	if (!mux_cc_clk)
++		return ERR_PTR(-ENOMEM);
++
++	mux_cc_clk->mux = mux->hw.clk;
++	mux_cc_clk->hw.init = &init;
++	mux_cc_clk->safe_rate = safe_rate;
++	mux_cc_clk->index = index;
++	mux_cc_clk->mux_cc = mux_cc;
++
++	mux_cc->clks[index] = &mux_cc_clk->hw;
++
++	init.name = kasprintf(GFP_KERNEL, "krait%s_%s_cc", s, name);
++	if (!init.name)
++		return ERR_PTR(-ENOMEM);
++
++	clk = devm_clk_register(dev, &mux_cc_clk->hw);
++
++	if (id < 0)
++		for_each_possible_cpu(cpu)
++			clk_prepare_enable(clk);
++	else
++		clk_prepare_enable(clk);
++
++	kfree(init.name);
++	return clk;
+ }
+ 
+ static struct clk *
+@@ -122,7 +213,7 @@ krait_add_div(struct device *dev, int id, const char *s, unsigned int offset)
+ 
+ static struct clk *
+ krait_add_sec_mux(struct device *dev, int id, const char *s,
+-		  unsigned int offset, bool unique_aux)
++		  unsigned int offset, bool unique_aux, struct mux_cc *mux_cc)
+ {
+ 	int ret, cpu;
+ 	struct krait_mux_clk *mux;
+@@ -179,10 +270,6 @@ krait_add_sec_mux(struct device *dev, int id, const char *s,
+ 	if (IS_ERR(clk))
+ 		goto err_clk;
+ 
+-	ret = krait_notifier_register(dev, clk, mux);
+-	if (ret)
+-		clk = ERR_PTR(ret);
+-
+ 	/* The secondary mux MUST be enabled or clk-krait silently
+ 	 * ignore any request.
+ 	 * Increase refcount for every CPU if it's the L2 secondary mux.
+@@ -193,6 +280,10 @@ krait_add_sec_mux(struct device *dev, int id, const char *s,
+ 	else
+ 		clk_prepare_enable(clk);
+ 
++	clk = krait_add_mux_cc_clk(dev, mux, id, QSB_RATE, s, "sec_mux", mux_cc);
++	if (IS_ERR(clk))
++		goto err_clk;
++
+ err_clk:
+ 	if (unique_aux)
+ 		kfree(parent_name);
+@@ -203,7 +294,7 @@ krait_add_sec_mux(struct device *dev, int id, const char *s,
+ 
+ static struct clk *
+ krait_add_pri_mux(struct device *dev, struct clk *hfpll_div, struct clk *sec_mux,
+-		  int id, const char *s, unsigned int offset)
++		  int id, const char *s, unsigned int offset, struct mux_cc *mux_cc)
+ {
+ 	int ret;
+ 	struct krait_mux_clk *mux;
+@@ -216,6 +307,7 @@ krait_add_pri_mux(struct device *dev, struct clk *hfpll_div, struct clk *sec_mux
+ 	};
+ 	struct clk *clk;
+ 	char *hfpll_name;
++	int cpu;
+ 
+ 	mux = devm_kzalloc(dev, sizeof(*mux), GFP_KERNEL);
+ 	if (!mux)
+@@ -249,19 +341,26 @@ krait_add_pri_mux(struct device *dev, struct clk *hfpll_div, struct clk *sec_mux
+ 	if (IS_ERR(clk))
+ 		goto err_clk;
+ 
+-	ret = krait_notifier_register(dev, clk, mux);
+-	if (ret)
+-		clk = ERR_PTR(ret);
++	if (id < 0)
++		for_each_possible_cpu(cpu)
++			clk_prepare_enable(clk);
++	else
++		clk_prepare_enable(clk);
++
++	clk = krait_add_mux_cc_clk(dev, mux, id, AUX_RATE, s, "pri_mux", mux_cc);
++	if (IS_ERR(clk))
++		goto err_clk;
+ 
+ err_clk:
+ 	kfree(hfpll_name);
+ err_hfpll:
+ 	kfree(init.name);
+-	return clk;
++	return clk; 
+ }
+ 
+ /* id < 0 for L2, otherwise id == physical CPU number */
+-static struct clk *krait_add_clks(struct device *dev, int id, bool unique_aux)
++static struct clk *krait_add_clks(struct device *dev, int id, bool unique_aux,
++				  struct krait_cc_global *krait_cc_global)
+ {
+ 	unsigned int offset;
+ 	void *p = NULL;
+@@ -284,13 +383,16 @@ static struct clk *krait_add_clks(struct device *dev, int id, bool unique_aux)
+ 		goto err;
+ 	}
+ 
+-	sec_mux = krait_add_sec_mux(dev, id, s, offset, unique_aux);
++	sec_mux = krait_add_sec_mux(dev, id, s, offset, unique_aux,
++				    &krait_cc_global->sec_mux_cc);
+ 	if (IS_ERR(sec_mux)) {
+ 		clk = sec_mux;
+ 		goto err;
+ 	}
+ 
+-	clk = krait_add_pri_mux(dev, hfpll_div, sec_mux, id, s, offset);
++	clk = krait_add_pri_mux(dev, hfpll_div, sec_mux, id, s, offset,
++				&krait_cc_global->pri_mux_cc);
++
+ err:
+ 	kfree(p);
+ 	return clk;
+@@ -299,14 +401,14 @@ static struct clk *krait_add_clks(struct device *dev, int id, bool unique_aux)
+ static struct clk *krait_of_get(struct of_phandle_args *clkspec, void *data)
+ {
+ 	unsigned int idx = clkspec->args[0];
+-	struct clk **clks = data;
++	struct clk_hw **clks = data;
+ 
+ 	if (idx >= 5) {
+ 		pr_err("%s: invalid clock index %d\n", __func__, idx);
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+-	return clks[idx] ? : ERR_PTR(-ENODEV);
++	return clks[idx]->clk ? : ERR_PTR(-ENODEV);
+ }
+ 
+ static const struct of_device_id krait_cc_match_table[] = {
+@@ -323,8 +425,9 @@ static int krait_cc_probe(struct platform_device *pdev)
+ 	unsigned long cur_rate, qsb_rate, pxo_rate;
+ 	int cpu;
+ 	struct clk *clk;
+-	struct clk **clks;
+ 	struct clk *l2_pri_mux_clk;
++	static struct clk_hw **clks;
++	struct krait_cc_global *krait_cc_global;
+ 
+ 	id = of_match_device(krait_cc_match_table, dev);
+ 	if (!id)
+@@ -359,36 +462,26 @@ static int krait_cc_probe(struct platform_device *pdev)
+ 			return PTR_ERR(clk);
+ 	}
+ 
+-	/* Krait configurations have at most 4 CPUs and one L2 */
+-	clks = devm_kcalloc(dev, 5, sizeof(*clks), GFP_KERNEL);
+-	if (!clks)
++	krait_cc_global = devm_kzalloc(dev, sizeof(*krait_cc_global),
++				       GFP_KERNEL);
++	if (!krait_cc_global)
+ 		return -ENOMEM;
+ 
+-	for_each_possible_cpu(cpu) {
+-		clk = krait_add_clks(dev, cpu, id->data);
+-		if (IS_ERR(clk))
+-			return PTR_ERR(clk);
+-		clks[cpu] = clk;
+-	}
++	spin_lock_init(&krait_cc_global->pri_mux_cc.lock);
++	spin_lock_init(&krait_cc_global->sec_mux_cc.lock);
+ 
+-	l2_pri_mux_clk = krait_add_clks(dev, -1, id->data);
++	l2_pri_mux_clk = krait_add_clks(dev, -1, id->data, krait_cc_global);
+ 	if (IS_ERR(l2_pri_mux_clk))
+ 		return PTR_ERR(l2_pri_mux_clk);
+-	clks[4] = l2_pri_mux_clk;
+ 
+-	/*
+-	 * We don't want the CPU or L2 clocks to be turned off at late init
+-	 * if CPUFREQ or HOTPLUG configs are disabled. So, bump up the
+-	 * refcount of these clocks. Any cpufreq/hotplug manager can assume
+-	 * that the clocks have already been prepared and enabled by the time
+-	 * they take over.
+-	 */
+-	for_each_online_cpu(cpu) {
+-		clk_prepare_enable(l2_pri_mux_clk);
+-		WARN(clk_prepare_enable(clks[cpu]),
+-		     "Unable to turn on CPU%d clock", cpu);
++	for_each_possible_cpu(cpu) {
++		clk = krait_add_clks(dev, cpu, id->data, krait_cc_global);
++		if (IS_ERR(clk))
++			return PTR_ERR(clk);
+ 	}
+ 
++	clks = krait_cc_global->pri_mux_cc.clks;
++
+ 	/*
+ 	 * Force reinit of HFPLLs and muxes to overwrite any potential
+ 	 * incorrect configuration of HFPLLs and muxes by the bootloader.
+@@ -404,10 +497,11 @@ static int krait_cc_probe(struct platform_device *pdev)
+ 		const char *l2_s = "L2";
+ 		char cpu_s[5];
+ 
+-		clk = clks[cpu];
+-		if (!clk)
++		if (!clks[cpu])
+ 			continue;
+ 
++		clk = clks[cpu]->clk;
++
+ 		if (cpu < 4)
+ 			snprintf(cpu_s, 5, "CPU%d", cpu);
+ 
+-- 
+2.37.2
+
